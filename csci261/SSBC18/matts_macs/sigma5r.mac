00000010 pushimm 0  -- clear Z
00000000
00000101 popext PSW
11111111
11111011
00000010 pushimm L(YY)  -- save L(YY) on stack
00001110
00000010 pushimm H(YY)  -- save H(YY) on stack
00000000
00000010 pushimm 5  -- save parameter n on the stack
00000101
00000110 jnz sigma5r  -- jump to subroutine, return address on the stack
00000000
00010010
00000101 YY: popext A  -- write returned value of sigma(n) to port A
11111111
11111100
00000001 halt
00000010 sigma5r: pushimm 0
00000000
00001000 add
00000110 jnz reccall
00000000
00100110
00000101 popext PSW  -- clear Z
11111111
11111011
00000101 popext sigma5r + 18d  -- save high byte of return address
00000000
00100100
00000101 popext sigma5r + 19d  -- save low byte of return address
00000000
00100101
00000010 pushimm 0  -- place return value on the stack
00000000
00000110 jnz 0000  -- return
00000000
00000000
00000101 reccall: popext hold  -- save parameter n in hold
00000000
01010011
00000011 pushext hold  -- restore n to the stack
00000000
01010011
00000010 pushimm L(recret)  -- save L(recret) on stack
00111110
00000010 pushimm H(recret)  -- save H(recret) on stack
00000000
00000010 pushimm 1  -- place n-1 on the stack
00000001
00000011 pushext hold
00000000
01010011
00001001 sub
00000010 pushimm 0  -- clear Z
00000000
00000101 popext PSW
11111111
11111011
00000110 jnz sigma5r  -- recursive call to sigma5r
00000000
00010010
00001000 recret: add  -- add n and sigm(n-1)
00000101 popext hold
00000000
01010011
00000010 pushimm 0
00000000
00000101 popext PSW  -- clear Z
11111111
11111011
00000101 popext sigma5r + 63d  -- save high byte of return address
00000000
01010001
00000101 popext sigma5r + 64d  -- save low byte of return address
00000000
01010010
00000011 pushext hold  -- place sigma(n) on the stack
00000000
01010011
00000110 jnz 0000  -- return
00000000
00000000
00000000 hold: val 0